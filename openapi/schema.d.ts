/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/match-tracking/start": {
    /** Старт матча */
    post: operations["MatchTrackingController_startMatch"];
  };
  "/api/match-tracking/end": {
    /** Окончание матча */
    post: operations["MatchTrackingController_endMatch"];
  };
  "/api/players/{id}": {
    get: operations["PlayerController_findById"];
  };
  "/api/players/{id}/counts": {
    get: operations["PlayerController_counts"];
  };
  "/api/players/{id}/recentMatches": {
    get: operations["PlayerController_recentMatches"];
  };
  "/api/players/{id}/heroes": {
    get: operations["PlayerController_heroes"];
  };
  "/api/matches/{id}": {
    /** Возвращает конкретный матч по его ID */
    get: operations["MatchesController_findById"];
  };
  "/api/matches/latest": {
    /** Возвращает список недавно сыграных матчей */
    post: operations["MatchesController_allMatches"];
  };
  "/api/rank/top-10": {
    get: operations["TopController_top10"];
  };
  "/api/rank/top-50": {
    get: operations["TopController_top50"];
  };
  "/api/rank/players": {
    /** Возвращает позицию игроков в рейтинке */
    post: operations["TopController_find"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    StartMatchTrackingDto: {
      match_id: number;
      players_profile: {
          account_id: number;
        }[];
    };
    StartMatchTrackingEntity: {
        account_id: number;
        rating: number;
      }[];
    EndMatchTrackingDto: {
      match: {
        match_id: number;
        duration: number;
        radiant_score: number;
        dire_score: number;
        radiant_win: boolean;
        server_version: number;
        region: number;
        /** @enum {string} */
        win_trigger: "KILLS" | "TOWER" | "GIVE_UP" | "DISCONNECT";
        /** @enum {string} */
        game_mode: "SF_ONLY" | "ALL_PICK" | "BALANCED_DRAFT";
        towers: {
          radiant: {
            max_health: number;
            health: number;
          };
          dire: {
            max_health: number;
            health: number;
          };
        };
      };
      players_match: ({
          account_id: number;
          /** @enum {string} */
          team: "RADIANT" | "DIRE";
          hero_id: number;
          hero_has_randomed: boolean;
          item_0: number;
          item_1: number;
          item_2: number;
          item_3: number;
          item_4: number;
          item_5: number;
          item_neutral: number;
          backpack_0: number;
          backpack_1: number;
          backpack_2: number;
          aghanims_scepter: boolean;
          aghanims_shard: boolean;
          moon_shard: boolean;
          started_items: {
            item_0: number;
            item_1: number;
            item_2: number;
            item_3: number;
            item_4: number;
            item_5: number;
            item_neutral: number;
            backpack_0: number;
            backpack_1: number;
            backpack_2: number;
          };
          kills: number;
          deaths: number;
          assists: number;
          leaver_status: number;
          last_hits: number;
          denies: number;
          xp_per_min: number;
          xp_total: number;
          gold_per_min: number;
          gold: number;
          gold_spent_total: number;
          gold_spent_support: number;
          gold_spent_consumables: number;
          gold_spent_items: number;
          hero_damage: number;
          tower_damage: number;
          level: number;
          obs_placed: number;
          sen_placed: number;
          rune_pickups: number;
          ability_upgrades_arr: number[];
          towers_killed: number;
          roshans_killed: number;
          net_worth: number;
          gold_t: number[];
          lh_t: number[];
          dn_t: number[];
          xp_t: number[];
        })[];
    };
    EndMatchTrackingEntity: {
      rating: {
          current: number;
          different: number;
        }[];
    };
    PlayerEntity: {
      /** Format: int64 */
      account_id: number;
      rating: number;
      avatar_full: string | null;
      avatar_medium: string | null;
      avatar_small: string | null;
      profile_url: string | null;
      profile_name: string | null;
      /** Format: date-time */
      info_uptated_at: Date;
    };
    MatchCounter: {
      win: number;
      lose: number;
      total: number;
    };
    CountsPlayerEntity: {
      wl: components["schemas"]["MatchCounter"];
      game_mode: {
        ALL_PICK?: components["schemas"]["MatchCounter"];
        BALANCED_DRAFT?: components["schemas"]["MatchCounter"];
        SF_ONLY?: components["schemas"]["MatchCounter"];
      };
    };
    PlayerSelectData: {
      /** @enum {string} */
      team: "RADIANT" | "DIRE";
      /** Format: int64 */
      account_id: number;
      hero_id: number;
      level: number;
      xp_total: number;
      denies: number;
      last_hits: number;
    };
    ShortMatchesEntity: {
      /** @enum {string} */
      win_trigger: "KILLS" | "TOWER" | "GIVE_UP" | "DISCONNECT";
      /** @enum {string} */
      game_mode: "SF_ONLY" | "ALL_PICK" | "BALANCED_DRAFT";
      /** Format: int64 */
      match_id: number;
      duration: number;
      radiant_score: number;
      dire_score: number;
      radiant_win: boolean;
      server_version: number;
      region: number;
      towers: Record<string, never>;
      players: components["schemas"]["PlayerSelectData"][];
      /** Format: date-time */
      created_at: Date;
    };
    HeroesPlayerEntity: {
      hero_id: number;
      win: number;
      lose: number;
      total: number;
    };
    MatchEntity: {
      /** Format: int64 */
      match_id: number;
      duration: number;
      radiant_score: number;
      dire_score: number;
      radiant_win: boolean;
      server_version: number;
      region: number;
      win_trigger: Record<string, never>;
      game_mode: Record<string, never>;
      towers: Record<string, never>;
      players?: components["schemas"]["PlayerMatchesEntity"][];
      /** Format: date-time */
      created_at: Date;
    };
    PlayerMatchesEntity: {
      Match?: components["schemas"]["MatchEntity"];
      /** Format: int64 */
      match_id: number;
      /** Format: int64 */
      account_id: number;
      team: Record<string, never>;
      rating_change: number;
      hero_id: number;
      hero_has_randomed: boolean;
      item_0: number;
      item_1: number;
      item_2: number;
      item_3: number;
      item_4: number;
      item_5: number;
      item_neutral: number;
      backpack_0: number;
      backpack_1: number;
      backpack_2: number;
      aghanims_scepter: boolean;
      aghanims_shard: boolean;
      moon_shard: boolean;
      started_items: Record<string, never>;
      kills: number;
      deaths: number;
      assists: number;
      leaver_status: number;
      last_hits: number;
      denies: number;
      xp_per_min: number;
      xp_total: number;
      gold_per_min: number;
      gold: number;
      gold_spent_total: number;
      gold_spent_support: number;
      gold_spent_consumables: number;
      gold_spent_items: number;
      hero_damage: number;
      tower_damage: number;
      level: number;
      obs_placed: number;
      sen_placed: number;
      rune_pickups: number;
      ability_upgrades_arr: number[];
      towers_killed: number;
      roshans_killed: number;
      net_worth: number;
      gold_t: number[];
      lh_t: number[];
      dn_t: number[];
      xp_t: number[];
    };
    PlayersRankDto: {
      ids: number[];
    };
    PlayersRankEntity: {
      /** Format: int64 */
      account_id: number;
      rank: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Старт матча */
  MatchTrackingController_startMatch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StartMatchTrackingDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StartMatchTrackingEntity"];
        };
      };
    };
  };
  /** Окончание матча */
  MatchTrackingController_endMatch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EndMatchTrackingDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EndMatchTrackingEntity"];
        };
      };
    };
  };
  PlayerController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerEntity"];
        };
      };
    };
  };
  PlayerController_counts: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CountsPlayerEntity"];
        };
      };
    };
  };
  PlayerController_recentMatches: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ShortMatchesEntity"][];
        };
      };
    };
  };
  PlayerController_heroes: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HeroesPlayerEntity"][];
        };
      };
    };
  };
  /** Возвращает конкретный матч по его ID */
  MatchesController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MatchEntity"];
        };
      };
    };
  };
  /** Возвращает список недавно сыграных матчей */
  MatchesController_allMatches: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ShortMatchesEntity"][];
        };
      };
    };
  };
  TopController_top10: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerEntity"][];
        };
      };
    };
  };
  TopController_top50: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerEntity"][];
        };
      };
    };
  };
  /** Возвращает позицию игроков в рейтинке */
  TopController_find: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlayersRankDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayersRankEntity"][];
        };
      };
    };
  };
}
